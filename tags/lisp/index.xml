<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0">
    <channel>
        <title>LISP - tag - Newbie@Corner</title>
        <link>https://glyh.github.io/tags/lisp/</link>
        <description>LISP - tag - Newbie@Corner</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>lyhokia@gmail.com (lyhokia)</managingEditor>
            <webMaster>lyhokia@gmail.com (lyhokia)</webMaster><lastBuildDate>Mon, 12 Apr 2021 18:16:52 &#43;0800</lastBuildDate><atom:link href="https://glyh.github.io/tags/lisp/" rel="self" type="application/rss+xml" /><item>
    <title>SICP Solutions in Clojure Chapter 3</title>
    <link>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-3/</link>
    <pubDate>Mon, 12 Apr 2021 18:16:52 &#43;0800</pubDate><author>lyhokia@gmail.com</author><dc:creator>lyhokia</dc:creator><guid>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-3/</guid>
    <description><![CDATA[Exercise 3.1 (defn make-accumulator [initial] (let [sum (atom initial)] (fn [x] (swap! sum (partial + x))))) Exercise 3.2 (defn make-monitored [f] (let [counter (atom 0)] (fn [x] (condp = x &#39;how-many-calls? @counter &#39;reset-count (swap! counter (constantly 0)) (do (f x) (swap! counter inc)))))) Exercise 3.3 (defn make-account [initial-balance password] (let [balance (atom initial-balance)] (fn [pass operate] (cond (not= pass password) (constantly &#34;Incorrect password&#34;) (= operate &#39;withdraw) (fn [x] (if (&gt;= @balance x) (swap!]]></description>
</item><item>
    <title>SICP Solutions in Clojure (Chapter 1)</title>
    <link>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-1/</link>
    <pubDate>Wed, 03 Feb 2021 16:39:00 &#43;0800</pubDate><author>lyhokia@gmail.com</author><dc:creator>lyhokia</dc:creator><guid>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-1/</guid>
    <description><![CDATA[<p>I&rsquo;m learning Clojure and SICP these days, and trying to finish the exercises on
the SICP.</p>]]></description>
</item><item>
    <title>SICP Solutions in Clojure (Chapter 2)</title>
    <link>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-2/</link>
    <pubDate>Wed, 03 Feb 2021 16:39:00 &#43;0800</pubDate><author>lyhokia@gmail.com</author><dc:creator>lyhokia</dc:creator><guid>https://glyh.github.io/posts/sicp-solutions-in-clojure-chapter-2/</guid>
    <description><![CDATA[<h3 id="exercise-21">Exercise 2.1</h3>
<div class="highlight"><pre class="chroma"><code class="language-clojure" data-lang="clojure"><span class="p">(</span><span class="kd">defn </span><span class="nv">make-rat</span> <span class="p">[</span><span class="nv">n</span> <span class="nv">d</span><span class="p">]</span>
  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">g</span> <span class="p">(</span><span class="nf">gcd</span> <span class="nv">n</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">nf</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">n</span> <span class="nv">g</span><span class="p">)</span> <span class="nv">df</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">d</span> <span class="nv">g</span><span class="p">)]</span>
    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&lt; </span><span class="nv">df</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">list </span><span class="p">(</span><span class="nb">- </span><span class="nv">nf</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">df</span><span class="p">))</span>
                      <span class="p">(</span><span class="nb">list </span><span class="nv">nf</span> <span class="nv">df</span><span class="p">)</span> <span class="p">)))</span>
</code></pre></div><h3 id="exercise-22">Exercise 2.2</h3>
<div class="highlight"><pre class="chroma"><code class="language-clojure" data-lang="clojure"><span class="p">(</span><span class="kd">defn </span><span class="nv">make-point</span> <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span><span class="p">]</span> <span class="p">(</span><span class="nb">list </span><span class="nv">x</span> <span class="nv">y</span><span class="p">))</span>
<span class="p">(</span><span class="k">def </span><span class="nv">x-point</span> <span class="nv">first</span><span class="p">)</span>
<span class="p">(</span><span class="k">def </span><span class="nv">y-point</span> <span class="nv">second</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">make-segment</span> <span class="p">[</span><span class="nv">s</span> <span class="nv">t</span><span class="p">]</span> <span class="p">(</span><span class="nb">list </span><span class="nv">s</span> <span class="nv">t</span><span class="p">))</span>
<span class="p">(</span><span class="k">def </span><span class="nv">start-segment</span> <span class="nv">first</span><span class="p">)</span>
<span class="p">(</span><span class="k">def </span><span class="nv">end-segment</span> <span class="nv">second</span><span class="p">)</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">midpoint-segment</span> <span class="p">[</span><span class="nv">seg</span><span class="p">]</span>
  <span class="p">(</span><span class="nb">map </span><span class="o">#</span><span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">%</span> <span class="p">(</span><span class="nf">start-segment</span> <span class="nv">seg</span><span class="p">))</span> <span class="p">(</span><span class="nf">%</span> <span class="p">(</span><span class="nf">end-segment</span> <span class="nv">seg</span><span class="p">)))</span> <span class="mi">2</span><span class="p">)</span>
       <span class="p">[</span><span class="nv">x-point</span> <span class="nv">y-point</span><span class="p">]))</span>

<span class="p">(</span><span class="kd">defn </span><span class="nv">print-point</span> <span class="p">[</span><span class="nv">p</span><span class="p">]</span> <span class="p">(</span><span class="nb">prn </span><span class="p">(</span><span class="nb">str </span><span class="s">&#34;(&#34;</span> <span class="p">(</span><span class="nf">x-point</span> <span class="nv">p</span><span class="p">)</span> <span class="s">&#34;, &#34;</span> <span class="p">(</span><span class="nf">y-point</span> <span class="nv">p</span><span class="p">)</span> <span class="s">&#34;)&#34;</span><span class="p">)))</span>
</code></pre></div>]]></description>
</item></channel>
</rss>
